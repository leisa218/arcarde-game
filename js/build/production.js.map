{"version":3,"sources":["../app.js"],"names":["Enemy","y","sprite","x","Math","floor","random","speed","prototype","update","dt","checkCollision","render","ctx","drawImage","Resources","get","player","Player","allEnemies","forEach","enemy","handleInput","e","console","log","openModal","level","enemyRow1","enemyRow2","enemyRow3","push","document","addEventListener","allowedKeys","keyCode","reset","getElementById","onclick","modal","style","display","span","getElementsByClassName","window","event","target"],"mappings":"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","file":"production.js","sourcesContent":["// The Enemies\n// Enemies our player must avoid\nvar Enemy = function(y) {\n    // Variables applied to each of our instances go here,\n    // we've provided one for you to get started\n    // The image/sprite for our enemies, this uses\n    // a helper we've provided to easily load images\n    this.sprite = 'images/enemy-bug.png';\n    // take random line number for enemy\n    this.y = y;\n    // random start position for enemy\n    this.x = [-100, 100, 200][Math.floor(Math.random() * 3)];\n    // random speed for enemy\n    this.speed = Math.floor((Math.random() * (8 - 3) + 3));\n};\n\n// Update the enemy's position, required method for game\n// Parameter: dt, a time delta between ticks\nEnemy.prototype.update = function(dt) {    \n    // You should multiply any movement by the dt parameter\n    // which will ensure the game runs at the same speed for\n    // all computers.\n    // check if enemy is out of gameboard and reset its values\n    if(this.x >= 500 ){\n        this.x = -100;\n        this.y = [65, 145, 240][Math.floor(Math.random() * 3)];\n    }\n    // make the enemy move by changing its X position\n    this.x += (500 / this.speed) * dt;\n    this.checkCollision();    \n};\n\n// Draw the enemy on the screen, required method for game\nEnemy.prototype.render = function() {\n    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);\n};\n\nEnemy.prototype.checkCollision = function () {\n    if (player.x <= this.x + 50 && this.x <= player.x + 20 && player.y <= this.y + 20 &&this.y <= player.y + 20) {\n        // when colliding with player, 'bump' them\n        player.x = 200;\n        player.y = 400;\n    }\n};\n\n\n// The Player\n// Now write your own player class\n// This class requires an update(), render() and\n// a handleInput() method.\nvar Player = function() {\n    // Variables applied to each of our instances go here,\n    // we've provided one for you to get started\n\n    // The image/sprite for our enemies, this uses\n    // a helper we've provided to easily load images\n    this.sprite = 'images/char-boy.png';\n\n    //position of player\n    this.x = 200;\n    this.y = 400;\n};\n// Update the player's position, required method for game\n// Parameter: dt, a time delta between ticks\nPlayer.prototype.update = function(dt) {    \n    // You should multiply any movement by the dt parameter\n    // which will ensure the game runs at the same speed for\n    // all computers.\n    allEnemies.forEach(function(enemy) {\n        if (enemy.y === (player.y - 12) && enemy.x > player.x - 75 && enemy.x < player.x + 70) {\n            //console.log('collistion');\n            player.x = 200;\n            player.y = 400;\n        }\n    });\n    \n};\n\nPlayer.prototype.render = function() {\n    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);\n};\n\nPlayer.prototype.handleInput = function(e) {\n    // check witch key is pressed and move player\n    // check if player touch border of game board and stop movement\n    console.log(this.y);\n    console.log(this.x);\n    if(e === 'up'){\n        \n        if(this.y === 60 || this.y === -25){\n            this.y = -25;\n            openModal();\n        }else{\n            this.y -=85;\n        }\n    }\n    if(e === 'down'){\n        if(this.y === 400){\n            this.y = 400;\n        }else{\n            this.y +=85;\n        }\n    }\n    if(e === 'left'){\n        if(this.x === 0){\n            this.x = 0;\n        }else{\n            this.x -=100;\n        }\n    }\n    if(e === 'right'){\n        if(this.x === 400){\n            this.x = 400;\n        }else{\n            this.x +=100;\n        }\n    }\n};\n\n\n\n\n\n// Now instantiate your objects.\n// Place all enemy objects in an array called allEnemies\n// Place the player object in a variable called player\nconst player = new Player();\n\n// create a level - depending on level amout of enemys\n// TBD: count up level\nconst level = 1;\n\nlet enemyRow1 = new Enemy(60);\nlet enemyRow2 = new Enemy(143);\nlet enemyRow3 = new Enemy(226); \nconst allEnemies = [];\nallEnemies.push(enemyRow1, enemyRow2, enemyRow3); //push enemises to an array\n\n\n//console.log(allEnemies);\n//const levelOne = allEnemies.push();\n\n\n// This listens for key presses and sends the keys to your\n// Player.handleInput() method. You don't need to modify this.\ndocument.addEventListener('keyup', function(e) {\n    var allowedKeys = {\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down'\n    };\n\n    player.handleInput(allowedKeys[e.keyCode]);\n});\n\nvar reset = document.getElementById('reset');\n// When the user clicks on <span> (x), close the modal\nreset.onclick = function() {\n    modal.style.display = \"none\";\n    player.x = 200;\n    player.y = 400;\n}\n\n// Modal\n// Get the modal\nvar modal = document.getElementById('myModal');\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on the button, open the modal \nfunction openModal() {\n    modal.style.display = \"block\";\n}\n\n// When the user clicks on <span> (x), close the modal\nspan.onclick = function() {\n    modal.style.display = \"none\";\n    player.x = 200;\n    player.y = 400;\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    if (event.target == modal) {\n        modal.style.display = \"none\";\n    }\n}"]}